// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAllWinesApiV1WinesGetData, GetAllWinesApiV1WinesGetResponse, GetAllWinesApiV1WinesGetError, CreateNewWineApiV1WinesPostData, CreateNewWineApiV1WinesPostResponse, CreateNewWineApiV1WinesPostError, SearchCurrentUserWinesApiV1WinesMyWinesGetData, SearchCurrentUserWinesApiV1WinesMyWinesGetResponse, SearchCurrentUserWinesApiV1WinesMyWinesGetError, DeleteExistingWineApiV1WinesWineIdDeleteData, DeleteExistingWineApiV1WinesWineIdDeleteResponse, DeleteExistingWineApiV1WinesWineIdDeleteError, GetOneWineApiV1WinesWineIdGetData, GetOneWineApiV1WinesWineIdGetResponse, GetOneWineApiV1WinesWineIdGetError, UpdateExistingWineApiV1WinesWineIdPatchData, UpdateExistingWineApiV1WinesWineIdPatchResponse, UpdateExistingWineApiV1WinesWineIdPatchError, GetWineForUserApiV1WinesUserWineIdGetData, GetWineForUserApiV1WinesUserWineIdGetResponse, GetWineForUserApiV1WinesUserWineIdGetError, ListCellarsApiV1CellarsGetData, ListCellarsApiV1CellarsGetResponse, ListCellarsApiV1CellarsGetError, CreateCellarApiV1CellarsPostData, CreateCellarApiV1CellarsPostResponse, CreateCellarApiV1CellarsPostError, DeleteCellarApiV1CellarsCellarIdDeleteData, DeleteCellarApiV1CellarsCellarIdDeleteResponse, DeleteCellarApiV1CellarsCellarIdDeleteError, GetCellarApiV1CellarsCellarIdGetData, GetCellarApiV1CellarsCellarIdGetResponse, GetCellarApiV1CellarsCellarIdGetError, UpdateCellarApiV1CellarsCellarIdPatchData, UpdateCellarApiV1CellarsCellarIdPatchResponse, UpdateCellarApiV1CellarsCellarIdPatchError, ListCellarWinesApiV1CellarsCellarIdWinesGetData, ListCellarWinesApiV1CellarsCellarIdWinesGetResponse, ListCellarWinesApiV1CellarsCellarIdWinesGetError, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetData, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponse, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetError, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteData, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponse, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteError, GetCellarWineApiV1CellarsWinesCellarWineIdGetData, GetCellarWineApiV1CellarsWinesCellarWineIdGetResponse, GetCellarWineApiV1CellarsWinesCellarWineIdGetError, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchData, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponse, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchError, AddWineToCellarApiV1CellarsWinesPostData, AddWineToCellarApiV1CellarsWinesPostResponse, AddWineToCellarApiV1CellarsWinesPostError, SearchWinesEndpointApiV1SearchPostData, SearchWinesEndpointApiV1SearchPostResponse, SearchWinesEndpointApiV1SearchPostError, GetUserSearchHistoryApiV1SearchHistoryGetData, GetUserSearchHistoryApiV1SearchHistoryGetResponse, GetUserSearchHistoryApiV1SearchHistoryGetError, CreateNoteApiV1NotesPostData, CreateNoteApiV1NotesPostResponse, CreateNoteApiV1NotesPostError, GetNotesByUserApiV1NotesUserUserIdGetData, GetNotesByUserApiV1NotesUserUserIdGetResponse, GetNotesByUserApiV1NotesUserUserIdGetError, GetNotesByWineApiV1NotesWineWineIdGetData, GetNotesByWineApiV1NotesWineWineIdGetResponse, GetNotesByWineApiV1NotesWineWineIdGetError, DeleteNoteApiV1NotesNoteIdDeleteData, DeleteNoteApiV1NotesNoteIdDeleteResponse, DeleteNoteApiV1NotesNoteIdDeleteError, GetNoteByIdApiV1NotesNoteIdGetData, GetNoteByIdApiV1NotesNoteIdGetResponse, GetNoteByIdApiV1NotesNoteIdGetError, UpdateNoteApiV1NotesNoteIdPatchData, UpdateNoteApiV1NotesNoteIdPatchResponse, UpdateNoteApiV1NotesNoteIdPatchError, UpsertNoteEndpointApiV1NotesUpsertPostData, UpsertNoteEndpointApiV1NotesUpsertPostResponse, CreateInteractionApiV1InteractionsPostData, CreateInteractionApiV1InteractionsPostResponse, CreateInteractionApiV1InteractionsPostError, DeleteInteractionApiV1InteractionsInteractionIdDeleteData, DeleteInteractionApiV1InteractionsInteractionIdDeleteResponse, DeleteInteractionApiV1InteractionsInteractionIdDeleteError, GetInteractionApiV1InteractionsInteractionIdGetData, GetInteractionApiV1InteractionsInteractionIdGetResponse, GetInteractionApiV1InteractionsInteractionIdGetError, UpdateInteractionApiV1InteractionsInteractionIdPatchData, UpdateInteractionApiV1InteractionsInteractionIdPatchResponse, UpdateInteractionApiV1InteractionsInteractionIdPatchError, GetInteractionsByUserApiV1InteractionsUserUserIdGetData, GetInteractionsByUserApiV1InteractionsUserUserIdGetResponse, GetInteractionsByUserApiV1InteractionsUserUserIdGetError, GetInteractionByWineApiV1InteractionsWineWineIdGetData, GetInteractionByWineApiV1InteractionsWineWineIdGetResponse, GetInteractionByWineApiV1InteractionsWineWineIdGetError, ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostData, ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostResponse, ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostError, RateWineApiV1InteractionsWineWineIdRatePostData, RateWineApiV1InteractionsWineWineIdRatePostResponse, RateWineApiV1InteractionsWineWineIdRatePostError, WineChatApiV1ChatWinePostData, WineChatApiV1ChatWinePostResponse, WineChatApiV1ChatWinePostError, DeleteMeApiV1AuthMeDeleteData, DeleteMeApiV1AuthMeDeleteResponse, RootGetData, HealthCheckHealthGetData, TestSupabaseApiV1TestSupabaseGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get All Wines
 */
export const getAllWinesApiV1WinesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllWinesApiV1WinesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllWinesApiV1WinesGetResponse, GetAllWinesApiV1WinesGetError, ThrowOnError>({
        url: '/api/v1/wines/',
        ...options
    });
};

/**
 * Create New Wine
 */
export const createNewWineApiV1WinesPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewWineApiV1WinesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewWineApiV1WinesPostResponse, CreateNewWineApiV1WinesPostError, ThrowOnError>({
        url: '/api/v1/wines/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search Current User Wines
 * Search for wines within the current authenticated user's interacted items
 * (cellar, notes, wishlist).
 *
 * Returns enriched wine data with user interaction information.
 *
 * Allows filtering by name, type, country, region, winery, grape,
 * and supports pagination and sorting.
 */
export const searchCurrentUserWinesApiV1WinesMyWinesGet = <ThrowOnError extends boolean = false>(options?: Options<SearchCurrentUserWinesApiV1WinesMyWinesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchCurrentUserWinesApiV1WinesMyWinesGetResponse, SearchCurrentUserWinesApiV1WinesMyWinesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/wines/my-wines',
        ...options
    });
};

/**
 * Delete Existing Wine
 */
export const deleteExistingWineApiV1WinesWineIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteExistingWineApiV1WinesWineIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExistingWineApiV1WinesWineIdDeleteResponse, DeleteExistingWineApiV1WinesWineIdDeleteError, ThrowOnError>({
        url: '/api/v1/wines/{wine_id}',
        ...options
    });
};

/**
 * Get One Wine
 */
export const getOneWineApiV1WinesWineIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneWineApiV1WinesWineIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneWineApiV1WinesWineIdGetResponse, GetOneWineApiV1WinesWineIdGetError, ThrowOnError>({
        url: '/api/v1/wines/{wine_id}',
        ...options
    });
};

/**
 * Update Existing Wine
 */
export const updateExistingWineApiV1WinesWineIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingWineApiV1WinesWineIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateExistingWineApiV1WinesWineIdPatchResponse, UpdateExistingWineApiV1WinesWineIdPatchError, ThrowOnError>({
        url: '/api/v1/wines/{wine_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Wine For User
 * Get comprehensive wine information for the current user, including:
 * 1. Basic wine information
 * 2. User's interaction with the wine (likes, wishlist, rating, etc.)
 * 3. User's notes about the wine
 * 4. User's cellar information for this wine (bottles in their cellars)
 *
 * The wine's image will be replaced with the user's scan image if available.
 */
export const getWineForUserApiV1WinesUserWineIdGet = <ThrowOnError extends boolean = false>(options: Options<GetWineForUserApiV1WinesUserWineIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWineForUserApiV1WinesUserWineIdGetResponse, GetWineForUserApiV1WinesUserWineIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/wines/user/{wine_id}',
        ...options
    });
};

/**
 * List Cellars
 * List cellars with optional filtering
 */
export const listCellarsApiV1CellarsGet = <ThrowOnError extends boolean = false>(options?: Options<ListCellarsApiV1CellarsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCellarsApiV1CellarsGetResponse, ListCellarsApiV1CellarsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars',
        ...options
    });
};

/**
 * Create Cellar
 * Create a new cellar
 */
export const createCellarApiV1CellarsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCellarApiV1CellarsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCellarApiV1CellarsPostResponse, CreateCellarApiV1CellarsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Cellar
 * Delete a cellar
 */
export const deleteCellarApiV1CellarsCellarIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCellarApiV1CellarsCellarIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCellarApiV1CellarsCellarIdDeleteResponse, DeleteCellarApiV1CellarsCellarIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/{cellar_id}',
        ...options
    });
};

/**
 * Get Cellar
 * Get a cellar by ID
 */
export const getCellarApiV1CellarsCellarIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCellarApiV1CellarsCellarIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCellarApiV1CellarsCellarIdGetResponse, GetCellarApiV1CellarsCellarIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/{cellar_id}',
        ...options
    });
};

/**
 * Update Cellar
 * Update a cellar
 */
export const updateCellarApiV1CellarsCellarIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCellarApiV1CellarsCellarIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCellarApiV1CellarsCellarIdPatchResponse, UpdateCellarApiV1CellarsCellarIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/{cellar_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Cellar Wines
 * List wines in a cellar with optional filtering
 */
export const listCellarWinesApiV1CellarsCellarIdWinesGet = <ThrowOnError extends boolean = false>(options: Options<ListCellarWinesApiV1CellarsCellarIdWinesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCellarWinesApiV1CellarsCellarIdWinesGetResponse, ListCellarWinesApiV1CellarsCellarIdWinesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/{cellar_id}/wines',
        ...options
    });
};

/**
 * Get Cellar Statistics
 * Get statistics for a cellar
 */
export const getCellarStatisticsApiV1CellarsCellarIdStatisticsGet = <ThrowOnError extends boolean = false>(options: Options<GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponse, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/{cellar_id}/statistics',
        ...options
    });
};

/**
 * Remove Wine From Cellar
 * Remove a wine from a cellar
 */
export const removeWineFromCellarApiV1CellarsWinesCellarWineIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponse, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/wines/{cellar_wine_id}',
        ...options
    });
};

/**
 * Get Cellar Wine
 * Get a specific wine in a cellar
 */
export const getCellarWineApiV1CellarsWinesCellarWineIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCellarWineApiV1CellarsWinesCellarWineIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCellarWineApiV1CellarsWinesCellarWineIdGetResponse, GetCellarWineApiV1CellarsWinesCellarWineIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/wines/{cellar_wine_id}',
        ...options
    });
};

/**
 * Update Cellar Wine
 * Update a wine in a cellar
 */
export const updateCellarWineApiV1CellarsWinesCellarWineIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponse, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/wines/{cellar_wine_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Wine To Cellar
 * Add a wine to a cellar
 */
export const addWineToCellarApiV1CellarsWinesPost = <ThrowOnError extends boolean = false>(options: Options<AddWineToCellarApiV1CellarsWinesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddWineToCellarApiV1CellarsWinesPostResponse, AddWineToCellarApiV1CellarsWinesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/cellars/wines',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search Wines Endpoint
 * Search for wines using text input or a Supabase image URL.
 * Records the search attempt in the user's history.
 *
 * Args:
 * user_id: UUID of the current user (from auth token)
 * search_data: JSON request body with text_input and/or image_url
 *
 * Returns:
 * List of found wines
 */
export const searchWinesEndpointApiV1SearchPost = <ThrowOnError extends boolean = false>(options?: Options<SearchWinesEndpointApiV1SearchPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SearchWinesEndpointApiV1SearchPostResponse, SearchWinesEndpointApiV1SearchPostError, ThrowOnError>({
        url: '/api/v1/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User Search History
 * Get the current user's search history with enriched wine information.
 *
 * Args:
 * user_id: UUID of the current user (from auth token)
 * limit: Maximum number of records to return
 * offset: Number of records to skip
 *
 * Returns:
 * SearchHistoryResponse with items and metadata
 */
export const getUserSearchHistoryApiV1SearchHistoryGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserSearchHistoryApiV1SearchHistoryGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSearchHistoryApiV1SearchHistoryGetResponse, GetUserSearchHistoryApiV1SearchHistoryGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/search/history',
        ...options
    });
};

/**
 * Create Note
 * Create a new note
 */
export const createNoteApiV1NotesPost = <ThrowOnError extends boolean = false>(options: Options<CreateNoteApiV1NotesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNoteApiV1NotesPostResponse, CreateNoteApiV1NotesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/notes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Notes By User
 * Get all notes for a user
 */
export const getNotesByUserApiV1NotesUserUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetNotesByUserApiV1NotesUserUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotesByUserApiV1NotesUserUserIdGetResponse, GetNotesByUserApiV1NotesUserUserIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/notes/user/{user_id}',
        ...options
    });
};

/**
 * Get Notes By Wine
 * Get a user's notes for a specific wine
 */
export const getNotesByWineApiV1NotesWineWineIdGet = <ThrowOnError extends boolean = false>(options: Options<GetNotesByWineApiV1NotesWineWineIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotesByWineApiV1NotesWineWineIdGetResponse, GetNotesByWineApiV1NotesWineWineIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/notes/wine/{wine_id}',
        ...options
    });
};

/**
 * Delete Note
 * Delete a note
 */
export const deleteNoteApiV1NotesNoteIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteNoteApiV1NotesNoteIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNoteApiV1NotesNoteIdDeleteResponse, DeleteNoteApiV1NotesNoteIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/notes/{note_id}',
        ...options
    });
};

/**
 * Get Note By Id
 * Get a single note by its ID
 */
export const getNoteByIdApiV1NotesNoteIdGet = <ThrowOnError extends boolean = false>(options: Options<GetNoteByIdApiV1NotesNoteIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNoteByIdApiV1NotesNoteIdGetResponse, GetNoteByIdApiV1NotesNoteIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/notes/{note_id}',
        ...options
    });
};

/**
 * Update Note
 * Update a note
 */
export const updateNoteApiV1NotesNoteIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateNoteApiV1NotesNoteIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateNoteApiV1NotesNoteIdPatchResponse, UpdateNoteApiV1NotesNoteIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/notes/{note_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upsert Note Endpoint
 * Upsert a note for a wine (create if it doesn't exist or update if it exists)
 */
export const upsertNoteEndpointApiV1NotesUpsertPost = <ThrowOnError extends boolean = false>(options: Options<UpsertNoteEndpointApiV1NotesUpsertPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertNoteEndpointApiV1NotesUpsertPostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/notes/upsert',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Interaction
 * Create a new interaction
 */
export const createInteractionApiV1InteractionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateInteractionApiV1InteractionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateInteractionApiV1InteractionsPostResponse, CreateInteractionApiV1InteractionsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Interaction
 * Delete an interaction
 */
export const deleteInteractionApiV1InteractionsInteractionIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteInteractionApiV1InteractionsInteractionIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteInteractionApiV1InteractionsInteractionIdDeleteResponse, DeleteInteractionApiV1InteractionsInteractionIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/{interaction_id}',
        ...options
    });
};

/**
 * Get Interaction
 * Get an interaction by ID
 */
export const getInteractionApiV1InteractionsInteractionIdGet = <ThrowOnError extends boolean = false>(options: Options<GetInteractionApiV1InteractionsInteractionIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInteractionApiV1InteractionsInteractionIdGetResponse, GetInteractionApiV1InteractionsInteractionIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/{interaction_id}',
        ...options
    });
};

/**
 * Update Interaction
 * Update an interaction
 */
export const updateInteractionApiV1InteractionsInteractionIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateInteractionApiV1InteractionsInteractionIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateInteractionApiV1InteractionsInteractionIdPatchResponse, UpdateInteractionApiV1InteractionsInteractionIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/{interaction_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Interactions By User
 * Get all interactions for a user
 */
export const getInteractionsByUserApiV1InteractionsUserUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetInteractionsByUserApiV1InteractionsUserUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInteractionsByUserApiV1InteractionsUserUserIdGetResponse, GetInteractionsByUserApiV1InteractionsUserUserIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/user/{user_id}',
        ...options
    });
};

/**
 * Get Interaction By Wine
 * Get a user's interaction with a specific wine
 */
export const getInteractionByWineApiV1InteractionsWineWineIdGet = <ThrowOnError extends boolean = false>(options: Options<GetInteractionByWineApiV1InteractionsWineWineIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInteractionByWineApiV1InteractionsWineWineIdGetResponse, GetInteractionByWineApiV1InteractionsWineWineIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/wine/{wine_id}',
        ...options
    });
};

/**
 * Toggle Interaction
 * Toggle an interaction property (liked, wishlist, tasted) for a wine
 *
 * Args:
 * wine_id: ID of the wine
 * action: Property to toggle ('liked', 'wishlist', or 'tasted')
 *
 * Returns:
 * Updated interaction data
 */
export const toggleInteractionApiV1InteractionsWineWineIdToggleActionPost = <ThrowOnError extends boolean = false>(options: Options<ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostResponse, ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/wine/{wine_id}/toggle/{action}',
        ...options
    });
};

/**
 * Rate Wine
 * Rate a wine (on scale of 1-5)
 *
 * Args:
 * wine_id: ID of the wine
 * rating: Rating value (1-5, can be decimal)
 *
 * Returns:
 * Updated interaction data
 */
export const rateWineApiV1InteractionsWineWineIdRatePost = <ThrowOnError extends boolean = false>(options: Options<RateWineApiV1InteractionsWineWineIdRatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RateWineApiV1InteractionsWineWineIdRatePostResponse, RateWineApiV1InteractionsWineWineIdRatePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/interactions/wine/{wine_id}/rate',
        ...options
    });
};

/**
 * Wine Chat
 * Process a wine chat request with conversation history.
 *
 * Args:
 * request: Chat request with messages and model
 * current_user: The authenticated user (optional)
 *
 * Returns:
 * ChatResponse with the AI's response and follow-up questions
 */
export const wineChatApiV1ChatWinePost = <ThrowOnError extends boolean = false>(options: Options<WineChatApiV1ChatWinePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WineChatApiV1ChatWinePostResponse, WineChatApiV1ChatWinePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/chat/wine',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Current User Account
 * Allows the currently authenticated user to delete their own account and associated data.
 */
export const deleteMeApiV1AuthMeDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteMeApiV1AuthMeDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteMeApiV1AuthMeDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/me',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint to verify the API is running
 * and the Supabase connection is working
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Test Supabase
 * Test endpoint to verify Supabase connection
 */
export const testSupabaseApiV1TestSupabaseGet = <ThrowOnError extends boolean = false>(options?: Options<TestSupabaseApiV1TestSupabaseGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/test-supabase',
        ...options
    });
};