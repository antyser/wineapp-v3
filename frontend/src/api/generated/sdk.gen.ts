// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAllWinesApiV1WinesGetData, GetAllWinesApiV1WinesGetResponse, GetAllWinesApiV1WinesGetError, CreateNewWineApiV1WinesPostData, CreateNewWineApiV1WinesPostResponse, CreateNewWineApiV1WinesPostError, DeleteExistingWineApiV1WinesWineIdDeleteData, DeleteExistingWineApiV1WinesWineIdDeleteResponse, DeleteExistingWineApiV1WinesWineIdDeleteError, GetOneWineApiV1WinesWineIdGetData, GetOneWineApiV1WinesWineIdGetResponse, GetOneWineApiV1WinesWineIdGetError, UpdateExistingWineApiV1WinesWineIdPatchData, UpdateExistingWineApiV1WinesWineIdPatchResponse, UpdateExistingWineApiV1WinesWineIdPatchError, ListCellarsApiV1CellarsGetData, ListCellarsApiV1CellarsGetResponse, ListCellarsApiV1CellarsGetError, CreateCellarApiV1CellarsPostData, CreateCellarApiV1CellarsPostResponse, CreateCellarApiV1CellarsPostError, DeleteCellarApiV1CellarsCellarIdDeleteData, DeleteCellarApiV1CellarsCellarIdDeleteResponse, DeleteCellarApiV1CellarsCellarIdDeleteError, GetCellarApiV1CellarsCellarIdGetData, GetCellarApiV1CellarsCellarIdGetResponse, GetCellarApiV1CellarsCellarIdGetError, UpdateCellarApiV1CellarsCellarIdPatchData, UpdateCellarApiV1CellarsCellarIdPatchResponse, UpdateCellarApiV1CellarsCellarIdPatchError, ListCellarWinesApiV1CellarsCellarIdWinesGetData, ListCellarWinesApiV1CellarsCellarIdWinesGetResponse, ListCellarWinesApiV1CellarsCellarIdWinesGetError, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetData, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponse, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetError, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteData, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponse, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteError, GetCellarWineApiV1CellarsWinesCellarWineIdGetData, GetCellarWineApiV1CellarsWinesCellarWineIdGetResponse, GetCellarWineApiV1CellarsWinesCellarWineIdGetError, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchData, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponse, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchError, AddWineToCellarApiV1CellarsWinesPostData, AddWineToCellarApiV1CellarsWinesPostResponse, AddWineToCellarApiV1CellarsWinesPostError, SearchWinesEndpointApiV1SearchPostData, SearchWinesEndpointApiV1SearchPostResponse, SearchWinesEndpointApiV1SearchPostError, GetUserSearchHistoryApiV1SearchHistoryGetData, GetUserSearchHistoryApiV1SearchHistoryGetResponse, GetUserSearchHistoryApiV1SearchHistoryGetError, RootGetData, HealthCheckHealthGetData, TestSupabaseApiV1TestSupabaseGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get All Wines
 */
export const getAllWinesApiV1WinesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllWinesApiV1WinesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllWinesApiV1WinesGetResponse, GetAllWinesApiV1WinesGetError, ThrowOnError>({
        url: '/api/v1/wines/',
        ...options
    });
};

/**
 * Create New Wine
 */
export const createNewWineApiV1WinesPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewWineApiV1WinesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewWineApiV1WinesPostResponse, CreateNewWineApiV1WinesPostError, ThrowOnError>({
        url: '/api/v1/wines/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Existing Wine
 */
export const deleteExistingWineApiV1WinesWineIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteExistingWineApiV1WinesWineIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExistingWineApiV1WinesWineIdDeleteResponse, DeleteExistingWineApiV1WinesWineIdDeleteError, ThrowOnError>({
        url: '/api/v1/wines/{wine_id}',
        ...options
    });
};

/**
 * Get One Wine
 */
export const getOneWineApiV1WinesWineIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOneWineApiV1WinesWineIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneWineApiV1WinesWineIdGetResponse, GetOneWineApiV1WinesWineIdGetError, ThrowOnError>({
        url: '/api/v1/wines/{wine_id}',
        ...options
    });
};

/**
 * Update Existing Wine
 */
export const updateExistingWineApiV1WinesWineIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingWineApiV1WinesWineIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateExistingWineApiV1WinesWineIdPatchResponse, UpdateExistingWineApiV1WinesWineIdPatchError, ThrowOnError>({
        url: '/api/v1/wines/{wine_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Cellars
 * List cellars with optional filtering
 */
export const listCellarsApiV1CellarsGet = <ThrowOnError extends boolean = false>(options?: Options<ListCellarsApiV1CellarsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCellarsApiV1CellarsGetResponse, ListCellarsApiV1CellarsGetError, ThrowOnError>({
        url: '/api/v1/cellars',
        ...options
    });
};

/**
 * Create Cellar
 * Create a new cellar
 */
export const createCellarApiV1CellarsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCellarApiV1CellarsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCellarApiV1CellarsPostResponse, CreateCellarApiV1CellarsPostError, ThrowOnError>({
        url: '/api/v1/cellars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Cellar
 * Delete a cellar
 */
export const deleteCellarApiV1CellarsCellarIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCellarApiV1CellarsCellarIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCellarApiV1CellarsCellarIdDeleteResponse, DeleteCellarApiV1CellarsCellarIdDeleteError, ThrowOnError>({
        url: '/api/v1/cellars/{cellar_id}',
        ...options
    });
};

/**
 * Get Cellar
 * Get a cellar by ID
 */
export const getCellarApiV1CellarsCellarIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCellarApiV1CellarsCellarIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCellarApiV1CellarsCellarIdGetResponse, GetCellarApiV1CellarsCellarIdGetError, ThrowOnError>({
        url: '/api/v1/cellars/{cellar_id}',
        ...options
    });
};

/**
 * Update Cellar
 * Update a cellar
 */
export const updateCellarApiV1CellarsCellarIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCellarApiV1CellarsCellarIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCellarApiV1CellarsCellarIdPatchResponse, UpdateCellarApiV1CellarsCellarIdPatchError, ThrowOnError>({
        url: '/api/v1/cellars/{cellar_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Cellar Wines
 * List wines in a cellar with optional filtering
 */
export const listCellarWinesApiV1CellarsCellarIdWinesGet = <ThrowOnError extends boolean = false>(options: Options<ListCellarWinesApiV1CellarsCellarIdWinesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCellarWinesApiV1CellarsCellarIdWinesGetResponse, ListCellarWinesApiV1CellarsCellarIdWinesGetError, ThrowOnError>({
        url: '/api/v1/cellars/{cellar_id}/wines',
        ...options
    });
};

/**
 * Get Cellar Statistics
 * Get statistics for a cellar
 */
export const getCellarStatisticsApiV1CellarsCellarIdStatisticsGet = <ThrowOnError extends boolean = false>(options: Options<GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponse, GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetError, ThrowOnError>({
        url: '/api/v1/cellars/{cellar_id}/statistics',
        ...options
    });
};

/**
 * Remove Wine From Cellar
 * Remove a wine from a cellar
 */
export const removeWineFromCellarApiV1CellarsWinesCellarWineIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponse, RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteError, ThrowOnError>({
        url: '/api/v1/cellars/wines/{cellar_wine_id}',
        ...options
    });
};

/**
 * Get Cellar Wine
 * Get a specific wine in a cellar
 */
export const getCellarWineApiV1CellarsWinesCellarWineIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCellarWineApiV1CellarsWinesCellarWineIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCellarWineApiV1CellarsWinesCellarWineIdGetResponse, GetCellarWineApiV1CellarsWinesCellarWineIdGetError, ThrowOnError>({
        url: '/api/v1/cellars/wines/{cellar_wine_id}',
        ...options
    });
};

/**
 * Update Cellar Wine
 * Update a wine in a cellar
 */
export const updateCellarWineApiV1CellarsWinesCellarWineIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponse, UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchError, ThrowOnError>({
        url: '/api/v1/cellars/wines/{cellar_wine_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Wine To Cellar
 * Add a wine to a cellar
 */
export const addWineToCellarApiV1CellarsWinesPost = <ThrowOnError extends boolean = false>(options: Options<AddWineToCellarApiV1CellarsWinesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddWineToCellarApiV1CellarsWinesPostResponse, AddWineToCellarApiV1CellarsWinesPostError, ThrowOnError>({
        url: '/api/v1/cellars/wines',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search Wines Endpoint
 * Search for wines using text input or a Supabase image URL.
 * Records the search attempt in the user's history.
 *
 * Args:
 * user_id: UUID of the current user (from auth token)
 * search_data: JSON request body with text_input and/or image_url
 *
 * Returns:
 * List of found wines
 */
export const searchWinesEndpointApiV1SearchPost = <ThrowOnError extends boolean = false>(options?: Options<SearchWinesEndpointApiV1SearchPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SearchWinesEndpointApiV1SearchPostResponse, SearchWinesEndpointApiV1SearchPostError, ThrowOnError>({
        url: '/api/v1/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User Search History
 * Get the current user's search history with enriched wine information.
 *
 * Args:
 * user_id: UUID of the current user (from auth token)
 * limit: Maximum number of records to return
 * offset: Number of records to skip
 *
 * Returns:
 * SearchHistoryResponse with items and metadata
 */
export const getUserSearchHistoryApiV1SearchHistoryGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserSearchHistoryApiV1SearchHistoryGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSearchHistoryApiV1SearchHistoryGetResponse, GetUserSearchHistoryApiV1SearchHistoryGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/search/history',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint to verify the API is running
 * and the Supabase connection is working
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Test Supabase
 * Test endpoint to verify Supabase connection
 */
export const testSupabaseApiV1TestSupabaseGet = <ThrowOnError extends boolean = false>(options?: Options<TestSupabaseApiV1TestSupabaseGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/test-supabase',
        ...options
    });
};