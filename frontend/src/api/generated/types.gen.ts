// This file is auto-generated by @hey-api/openapi-ts

/**
 * Full cellar model with all fields
 */
export type Cellar = {
    name: string;
    sections?: Array<string> | null;
    image_url?: string | null;
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Fields required to create a cellar
 */
export type CellarCreate = {
    name: string;
    sections?: Array<string> | null;
    image_url?: string | null;
    user_id?: string | null;
};

/**
 * Result from listing cellars
 */
export type CellarListResult = {
    items: Array<Cellar>;
    total: number;
};

/**
 * Statistics for a cellar
 */
export type CellarStatistics = {
    total_bottles: number;
    total_value: number;
    bottles_by_type: {
        [key: string]: number;
    };
    bottles_by_region: {
        [key: string]: number;
    };
    bottles_by_vintage: {
        [key: string]: number;
    };
};

/**
 * Fields that can be updated
 */
export type CellarUpdate = {
    name?: string | null;
    sections?: Array<string> | null;
    image_url?: string | null;
};

/**
 * Full cellar wine model with all fields
 */
export type CellarWine = {
    cellar_id: string;
    wine_id: string;
    purchase_date?: string | null;
    purchase_price?: number | null;
    quantity?: number;
    size?: string | null;
    section?: string | null;
    condition?: string | null;
    status?: string;
    id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Fields required to create a cellar wine
 */
export type CellarWineCreate = {
    cellar_id: string;
    wine_id: string;
    purchase_date?: string | null;
    purchase_price?: number | null;
    quantity?: number;
    size?: string | null;
    section?: string | null;
    condition?: string | null;
    status?: string;
};

/**
 * Result from listing cellar wines
 */
export type CellarWineListResult = {
    items: Array<CellarWineResponse>;
    total: number;
};

/**
 * Cellar wine with embedded wine details
 */
export type CellarWineResponse = {
    cellar_id: string;
    wine_id: string;
    purchase_date?: string | null;
    purchase_price?: number | null;
    quantity?: number;
    size?: string | null;
    section?: string | null;
    condition?: string | null;
    status?: string;
    id: string;
    created_at: string;
    updated_at: string;
    wine: {
        [key: string]: unknown;
    };
};

/**
 * Fields that can be updated for a cellar wine
 */
export type CellarWineUpdate = {
    purchase_date?: string | null;
    purchase_price?: number | null;
    quantity?: number | null;
    size?: string | null;
    section?: string | null;
    condition?: string | null;
    status?: string | null;
};

/**
 * Request body for chat API.
 */
export type ChatRequest = {
    /**
     * List of conversation messages
     */
    messages: Array<Message>;
    /**
     * Model to use for the chat
     */
    model?: string;
    /**
     * Whether to stream the response
     */
    stream?: boolean;
};

/**
 * Response for chat API.
 */
export type ChatResponse = {
    /**
     * AI assistant response
     */
    response: MessageContent;
    /**
     * Generated follow-up questions
     */
    followup_questions?: Array<string>;
};

/**
 * Wine data enriched with user interaction information
 */
export type EnrichedUserWine = {
    name: string;
    winery?: string | null;
    vintage?: number | null;
    region?: string | null;
    country?: string | null;
    varietal?: string | null;
    type?: string | null;
    price?: number | null;
    rating?: number | null;
    wine_searcher_url?: string | null;
    average_price?: number | null;
    description?: string | null;
    name_alias?: Array<string> | null;
    image_url?: string | null;
    wine_searcher_id?: string | null;
    drinking_window?: string | null;
    food_pairings?: string | null;
    abv?: string | null;
    tasting_notes?: string | null;
    winemaker_notes?: string | null;
    professional_reviews?: string | null;
    id: string;
    created_at: string;
    updated_at: string;
    wishlist?: boolean | null;
    latest_note?: string | null;
    latest_note_date?: string | null;
    last_interaction?: string | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Interaction model with all fields
 */
export type Interaction = {
    user_id: string;
    wine_id: string;
    liked?: boolean | null;
    wishlist?: boolean | null;
    rating?: number | null;
    tasted?: boolean | null;
    id: string;
};

/**
 * Fields required to create a new interaction
 */
export type InteractionCreate = {
    user_id: string;
    wine_id: string;
    liked?: boolean | null;
    wishlist?: boolean | null;
    rating?: number | null;
    tasted?: boolean | null;
};

/**
 * Fields that can be updated for an interaction
 */
export type InteractionUpdate = {
    liked?: boolean | null;
    wishlist?: boolean | null;
    rating?: number | null;
    tasted?: boolean | null;
};

/**
 * Chat message model.
 */
export type Message = {
    /**
     * Role of the message sender
     */
    role: 'user' | 'assistant';
    /**
     * Content of the message
     */
    content: MessageContent;
};

/**
 * Content of a chat message.
 */
export type MessageContent = {
    /**
     * The text content of the message
     */
    text: string;
};

/**
 * Note model with all fields
 */
export type Note = {
    user_id: string;
    wine_id: string;
    tasting_date?: string | null;
    note_text: string;
    id: string;
};

/**
 * Fields required to create a new note
 */
export type NoteCreate = {
    user_id?: string | null;
    wine_id: string;
    tasting_date?: string | null;
    note_text: string;
};

/**
 * Fields that can be updated for a note
 */
export type NoteUpdate = {
    tasting_date?: string | null;
    note_text?: string | null;
};

/**
 * Payload for upserting a note (create if not exists, update if exists)
 */
export type NoteUpsertPayload = {
    wine_id: string;
    tasting_date?: string | null;
    note_text: string;
};

export type PaginatedEnrichedWineResponse = {
    items: Array<EnrichedUserWine>;
    total: number;
};

export type PaginatedWineResponse = {
    items: Array<Wine>;
    total: number;
};

/**
 * Enhanced search history item with wine details
 */
export type SearchHistoryItemResponse = {
    search_type: SearchType;
    search_query?: string | null;
    result_wine_ids?: Array<string> | null;
    id: string;
    user_id: string;
    created_at: string;
    wines?: Array<Wine> | null;
};

/**
 * Response model for search history endpoint
 */
export type SearchHistoryResponse = {
    items: Array<SearchHistoryItemResponse>;
    total: number;
    limit: number;
    offset: number;
};

export type SearchRequest = {
    text_input?: string | null;
    image_url?: string | null;
};

/**
 * Enum for search types
 */
export type SearchType = 'text' | 'image';

/**
 * Response model for the user's comprehensive wine information
 */
export type UserWineResponse = {
    wine?: Wine | null;
    interaction?: Interaction | null;
    notes?: Array<Note>;
    cellar_wines?: Array<CellarWine> | null;
    offers?: Array<WineSearcherOffer> | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

/**
 * Full wine model with all fields
 */
export type Wine = {
    name: string;
    winery?: string | null;
    vintage?: number | null;
    region?: string | null;
    country?: string | null;
    varietal?: string | null;
    type?: string | null;
    price?: number | null;
    rating?: number | null;
    wine_searcher_url?: string | null;
    average_price?: number | null;
    description?: string | null;
    name_alias?: Array<string> | null;
    image_url?: string | null;
    wine_searcher_id?: string | null;
    drinking_window?: string | null;
    food_pairings?: string | null;
    abv?: string | null;
    tasting_notes?: string | null;
    winemaker_notes?: string | null;
    professional_reviews?: string | null;
    id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Fields required to create a wine
 */
export type WineCreate = {
    name: string;
    winery?: string | null;
    vintage?: number | null;
    region?: string | null;
    country?: string | null;
    varietal?: string | null;
    type?: string | null;
    price?: number | null;
    rating?: number | null;
    wine_searcher_url?: string | null;
    average_price?: number | null;
    description?: string | null;
    name_alias?: Array<string> | null;
    image_url?: string | null;
    wine_searcher_id?: string | null;
    drinking_window?: string | null;
    food_pairings?: string | null;
    abv?: string | null;
    tasting_notes?: string | null;
    winemaker_notes?: string | null;
    professional_reviews?: string | null;
};

/**
 * Offer from Wine-Searcher.com
 */
export type WineSearcherOffer = {
    price?: number | null;
    unit_price?: number | null;
    description?: string | null;
    seller_name?: string | null;
    url?: string | null;
    seller_address_region?: string | null;
    seller_address_country?: string | null;
    name?: string | null;
};

/**
 * Fields that can be updated
 */
export type WineUpdate = {
    name?: string | null;
    winery?: string | null;
    vintage?: number | null;
    region?: string | null;
    country?: string | null;
    varietal?: string | null;
    type?: string | null;
    price?: number | null;
    rating?: number | null;
    tasting_notes?: string | null;
    image_url?: string | null;
    wine_searcher_id?: string | null;
    wine_searcher_url?: string | null;
    average_price?: number | null;
    description?: string | null;
    drinking_window?: string | null;
    food_pairings?: string | null;
    abv?: string | null;
    name_alias?: Array<string> | null;
    winemaker_notes?: string | null;
    professional_reviews?: string | null;
};

export type GetAllWinesApiV1WinesGetData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        region?: string | null;
        country?: string | null;
        varietal?: string | null;
        type?: string | null;
        min_price?: number | null;
        max_price?: number | null;
        min_rating?: number | null;
        min_vintage?: number | null;
        max_vintage?: number | null;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/wines/';
};

export type GetAllWinesApiV1WinesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllWinesApiV1WinesGetError = GetAllWinesApiV1WinesGetErrors[keyof GetAllWinesApiV1WinesGetErrors];

export type GetAllWinesApiV1WinesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedWineResponse;
};

export type GetAllWinesApiV1WinesGetResponse = GetAllWinesApiV1WinesGetResponses[keyof GetAllWinesApiV1WinesGetResponses];

export type CreateNewWineApiV1WinesPostData = {
    body: WineCreate;
    path?: never;
    query?: never;
    url: '/api/v1/wines/';
};

export type CreateNewWineApiV1WinesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateNewWineApiV1WinesPostError = CreateNewWineApiV1WinesPostErrors[keyof CreateNewWineApiV1WinesPostErrors];

export type CreateNewWineApiV1WinesPostResponses = {
    /**
     * Successful Response
     */
    201: Wine;
};

export type CreateNewWineApiV1WinesPostResponse = CreateNewWineApiV1WinesPostResponses[keyof CreateNewWineApiV1WinesPostResponses];

export type SearchCurrentUserWinesApiV1WinesMyWinesGetData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        wine_type?: string | null;
        country?: string | null;
        grape_variety?: string | null;
        region?: string | null;
        winery?: string | null;
        sort_by?: string | null;
        sort_order?: string;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/wines/my-wines';
};

export type SearchCurrentUserWinesApiV1WinesMyWinesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchCurrentUserWinesApiV1WinesMyWinesGetError = SearchCurrentUserWinesApiV1WinesMyWinesGetErrors[keyof SearchCurrentUserWinesApiV1WinesMyWinesGetErrors];

export type SearchCurrentUserWinesApiV1WinesMyWinesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedEnrichedWineResponse;
};

export type SearchCurrentUserWinesApiV1WinesMyWinesGetResponse = SearchCurrentUserWinesApiV1WinesMyWinesGetResponses[keyof SearchCurrentUserWinesApiV1WinesMyWinesGetResponses];

export type DeleteExistingWineApiV1WinesWineIdDeleteData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/wines/{wine_id}';
};

export type DeleteExistingWineApiV1WinesWineIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteExistingWineApiV1WinesWineIdDeleteError = DeleteExistingWineApiV1WinesWineIdDeleteErrors[keyof DeleteExistingWineApiV1WinesWineIdDeleteErrors];

export type DeleteExistingWineApiV1WinesWineIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteExistingWineApiV1WinesWineIdDeleteResponse = DeleteExistingWineApiV1WinesWineIdDeleteResponses[keyof DeleteExistingWineApiV1WinesWineIdDeleteResponses];

export type GetOneWineApiV1WinesWineIdGetData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/wines/{wine_id}';
};

export type GetOneWineApiV1WinesWineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOneWineApiV1WinesWineIdGetError = GetOneWineApiV1WinesWineIdGetErrors[keyof GetOneWineApiV1WinesWineIdGetErrors];

export type GetOneWineApiV1WinesWineIdGetResponses = {
    /**
     * Successful Response
     */
    200: Wine;
};

export type GetOneWineApiV1WinesWineIdGetResponse = GetOneWineApiV1WinesWineIdGetResponses[keyof GetOneWineApiV1WinesWineIdGetResponses];

export type UpdateExistingWineApiV1WinesWineIdPatchData = {
    body: WineUpdate;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/wines/{wine_id}';
};

export type UpdateExistingWineApiV1WinesWineIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateExistingWineApiV1WinesWineIdPatchError = UpdateExistingWineApiV1WinesWineIdPatchErrors[keyof UpdateExistingWineApiV1WinesWineIdPatchErrors];

export type UpdateExistingWineApiV1WinesWineIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Wine;
};

export type UpdateExistingWineApiV1WinesWineIdPatchResponse = UpdateExistingWineApiV1WinesWineIdPatchResponses[keyof UpdateExistingWineApiV1WinesWineIdPatchResponses];

export type GetWineForUserApiV1WinesUserWineIdGetData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/wines/user/{wine_id}';
};

export type GetWineForUserApiV1WinesUserWineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWineForUserApiV1WinesUserWineIdGetError = GetWineForUserApiV1WinesUserWineIdGetErrors[keyof GetWineForUserApiV1WinesUserWineIdGetErrors];

export type GetWineForUserApiV1WinesUserWineIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserWineResponse;
};

export type GetWineForUserApiV1WinesUserWineIdGetResponse = GetWineForUserApiV1WinesUserWineIdGetResponses[keyof GetWineForUserApiV1WinesUserWineIdGetResponses];

export type ListCellarsApiV1CellarsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by user ID
         */
        user_id?: string | null;
        /**
         * Maximum number of results to return
         */
        limit?: number;
        /**
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/cellars';
};

export type ListCellarsApiV1CellarsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListCellarsApiV1CellarsGetError = ListCellarsApiV1CellarsGetErrors[keyof ListCellarsApiV1CellarsGetErrors];

export type ListCellarsApiV1CellarsGetResponses = {
    /**
     * Successful Response
     */
    200: CellarListResult;
};

export type ListCellarsApiV1CellarsGetResponse = ListCellarsApiV1CellarsGetResponses[keyof ListCellarsApiV1CellarsGetResponses];

export type CreateCellarApiV1CellarsPostData = {
    body: CellarCreate;
    path?: never;
    query?: never;
    url: '/api/v1/cellars';
};

export type CreateCellarApiV1CellarsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCellarApiV1CellarsPostError = CreateCellarApiV1CellarsPostErrors[keyof CreateCellarApiV1CellarsPostErrors];

export type CreateCellarApiV1CellarsPostResponses = {
    /**
     * Successful Response
     */
    201: Cellar;
};

export type CreateCellarApiV1CellarsPostResponse = CreateCellarApiV1CellarsPostResponses[keyof CreateCellarApiV1CellarsPostResponses];

export type DeleteCellarApiV1CellarsCellarIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar to delete
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}';
};

export type DeleteCellarApiV1CellarsCellarIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCellarApiV1CellarsCellarIdDeleteError = DeleteCellarApiV1CellarsCellarIdDeleteErrors[keyof DeleteCellarApiV1CellarsCellarIdDeleteErrors];

export type DeleteCellarApiV1CellarsCellarIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteCellarApiV1CellarsCellarIdDeleteResponse = DeleteCellarApiV1CellarsCellarIdDeleteResponses[keyof DeleteCellarApiV1CellarsCellarIdDeleteResponses];

export type GetCellarApiV1CellarsCellarIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar to retrieve
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}';
};

export type GetCellarApiV1CellarsCellarIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCellarApiV1CellarsCellarIdGetError = GetCellarApiV1CellarsCellarIdGetErrors[keyof GetCellarApiV1CellarsCellarIdGetErrors];

export type GetCellarApiV1CellarsCellarIdGetResponses = {
    /**
     * Successful Response
     */
    200: Cellar;
};

export type GetCellarApiV1CellarsCellarIdGetResponse = GetCellarApiV1CellarsCellarIdGetResponses[keyof GetCellarApiV1CellarsCellarIdGetResponses];

export type UpdateCellarApiV1CellarsCellarIdPatchData = {
    body: CellarUpdate;
    path: {
        /**
         * The ID of the cellar to update
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}';
};

export type UpdateCellarApiV1CellarsCellarIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCellarApiV1CellarsCellarIdPatchError = UpdateCellarApiV1CellarsCellarIdPatchErrors[keyof UpdateCellarApiV1CellarsCellarIdPatchErrors];

export type UpdateCellarApiV1CellarsCellarIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Cellar;
};

export type UpdateCellarApiV1CellarsCellarIdPatchResponse = UpdateCellarApiV1CellarsCellarIdPatchResponses[keyof UpdateCellarApiV1CellarsCellarIdPatchResponses];

export type ListCellarWinesApiV1CellarsCellarIdWinesGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar
         */
        cellar_id: string;
    };
    query?: {
        /**
         * Filter by cellar section
         */
        section?: string | null;
        /**
         * Filter by status (e.g. in_stock, consumed)
         */
        status?: string | null;
        /**
         * Search query for wine name, winery, etc.
         */
        query?: string | null;
        /**
         * Field to sort by
         */
        sort_by?: string | null;
        /**
         * Sort direction (true for descending)
         */
        sort_desc?: boolean;
        /**
         * Maximum number of results to return
         */
        limit?: number;
        /**
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/cellars/{cellar_id}/wines';
};

export type ListCellarWinesApiV1CellarsCellarIdWinesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListCellarWinesApiV1CellarsCellarIdWinesGetError = ListCellarWinesApiV1CellarsCellarIdWinesGetErrors[keyof ListCellarWinesApiV1CellarsCellarIdWinesGetErrors];

export type ListCellarWinesApiV1CellarsCellarIdWinesGetResponses = {
    /**
     * Successful Response
     */
    200: CellarWineListResult;
};

export type ListCellarWinesApiV1CellarsCellarIdWinesGetResponse = ListCellarWinesApiV1CellarsCellarIdWinesGetResponses[keyof ListCellarWinesApiV1CellarsCellarIdWinesGetResponses];

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}/statistics';
};

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetError = GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetErrors[keyof GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetErrors];

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponses = {
    /**
     * Successful Response
     */
    200: CellarStatistics;
};

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponse = GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponses[keyof GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponses];

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar wine to remove
         */
        cellar_wine_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/wines/{cellar_wine_id}';
};

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteError = RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteErrors[keyof RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteErrors];

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponse = RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponses[keyof RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponses];

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar wine to retrieve
         */
        cellar_wine_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/wines/{cellar_wine_id}';
};

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetError = GetCellarWineApiV1CellarsWinesCellarWineIdGetErrors[keyof GetCellarWineApiV1CellarsWinesCellarWineIdGetErrors];

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetResponses = {
    /**
     * Successful Response
     */
    200: CellarWineResponse;
};

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetResponse = GetCellarWineApiV1CellarsWinesCellarWineIdGetResponses[keyof GetCellarWineApiV1CellarsWinesCellarWineIdGetResponses];

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchData = {
    body: CellarWineUpdate;
    path: {
        /**
         * The ID of the cellar wine to update
         */
        cellar_wine_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/wines/{cellar_wine_id}';
};

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchError = UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchErrors[keyof UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchErrors];

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponses = {
    /**
     * Successful Response
     */
    200: CellarWineResponse;
};

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponse = UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponses[keyof UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponses];

export type AddWineToCellarApiV1CellarsWinesPostData = {
    body: CellarWineCreate;
    path?: never;
    query?: never;
    url: '/api/v1/cellars/wines';
};

export type AddWineToCellarApiV1CellarsWinesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddWineToCellarApiV1CellarsWinesPostError = AddWineToCellarApiV1CellarsWinesPostErrors[keyof AddWineToCellarApiV1CellarsWinesPostErrors];

export type AddWineToCellarApiV1CellarsWinesPostResponses = {
    /**
     * Successful Response
     */
    201: CellarWineResponse;
};

export type AddWineToCellarApiV1CellarsWinesPostResponse = AddWineToCellarApiV1CellarsWinesPostResponses[keyof AddWineToCellarApiV1CellarsWinesPostResponses];

export type SearchWinesEndpointApiV1SearchPostData = {
    body?: SearchRequest | null;
    path?: never;
    query?: never;
    url: '/api/v1/search';
};

export type SearchWinesEndpointApiV1SearchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchWinesEndpointApiV1SearchPostError = SearchWinesEndpointApiV1SearchPostErrors[keyof SearchWinesEndpointApiV1SearchPostErrors];

export type SearchWinesEndpointApiV1SearchPostResponses = {
    /**
     * Successful Response
     */
    200: Array<Wine>;
};

export type SearchWinesEndpointApiV1SearchPostResponse = SearchWinesEndpointApiV1SearchPostResponses[keyof SearchWinesEndpointApiV1SearchPostResponses];

export type GetUserSearchHistoryApiV1SearchHistoryGetData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/search/history';
};

export type GetUserSearchHistoryApiV1SearchHistoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserSearchHistoryApiV1SearchHistoryGetError = GetUserSearchHistoryApiV1SearchHistoryGetErrors[keyof GetUserSearchHistoryApiV1SearchHistoryGetErrors];

export type GetUserSearchHistoryApiV1SearchHistoryGetResponses = {
    /**
     * Successful Response
     */
    200: SearchHistoryResponse;
};

export type GetUserSearchHistoryApiV1SearchHistoryGetResponse = GetUserSearchHistoryApiV1SearchHistoryGetResponses[keyof GetUserSearchHistoryApiV1SearchHistoryGetResponses];

export type CreateNoteApiV1NotesPostData = {
    body: NoteCreate;
    path?: never;
    query?: never;
    url: '/api/v1/notes/';
};

export type CreateNoteApiV1NotesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateNoteApiV1NotesPostError = CreateNoteApiV1NotesPostErrors[keyof CreateNoteApiV1NotesPostErrors];

export type CreateNoteApiV1NotesPostResponses = {
    /**
     * Successful Response
     */
    200: Note;
};

export type CreateNoteApiV1NotesPostResponse = CreateNoteApiV1NotesPostResponses[keyof CreateNoteApiV1NotesPostResponses];

export type GetNotesByUserApiV1NotesUserUserIdGetData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/v1/notes/user/{user_id}';
};

export type GetNotesByUserApiV1NotesUserUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetNotesByUserApiV1NotesUserUserIdGetError = GetNotesByUserApiV1NotesUserUserIdGetErrors[keyof GetNotesByUserApiV1NotesUserUserIdGetErrors];

export type GetNotesByUserApiV1NotesUserUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type GetNotesByUserApiV1NotesUserUserIdGetResponse = GetNotesByUserApiV1NotesUserUserIdGetResponses[keyof GetNotesByUserApiV1NotesUserUserIdGetResponses];

export type GetNotesByWineApiV1NotesWineWineIdGetData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/notes/wine/{wine_id}';
};

export type GetNotesByWineApiV1NotesWineWineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetNotesByWineApiV1NotesWineWineIdGetError = GetNotesByWineApiV1NotesWineWineIdGetErrors[keyof GetNotesByWineApiV1NotesWineWineIdGetErrors];

export type GetNotesByWineApiV1NotesWineWineIdGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Note>;
};

export type GetNotesByWineApiV1NotesWineWineIdGetResponse = GetNotesByWineApiV1NotesWineWineIdGetResponses[keyof GetNotesByWineApiV1NotesWineWineIdGetResponses];

export type DeleteNoteApiV1NotesNoteIdDeleteData = {
    body?: never;
    path: {
        note_id: string;
    };
    query?: never;
    url: '/api/v1/notes/{note_id}';
};

export type DeleteNoteApiV1NotesNoteIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteNoteApiV1NotesNoteIdDeleteError = DeleteNoteApiV1NotesNoteIdDeleteErrors[keyof DeleteNoteApiV1NotesNoteIdDeleteErrors];

export type DeleteNoteApiV1NotesNoteIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteNoteApiV1NotesNoteIdDeleteResponse = DeleteNoteApiV1NotesNoteIdDeleteResponses[keyof DeleteNoteApiV1NotesNoteIdDeleteResponses];

export type GetNoteByIdApiV1NotesNoteIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the note to retrieve
         */
        note_id: string;
    };
    query?: never;
    url: '/api/v1/notes/{note_id}';
};

export type GetNoteByIdApiV1NotesNoteIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetNoteByIdApiV1NotesNoteIdGetError = GetNoteByIdApiV1NotesNoteIdGetErrors[keyof GetNoteByIdApiV1NotesNoteIdGetErrors];

export type GetNoteByIdApiV1NotesNoteIdGetResponses = {
    /**
     * Successful Response
     */
    200: Note;
};

export type GetNoteByIdApiV1NotesNoteIdGetResponse = GetNoteByIdApiV1NotesNoteIdGetResponses[keyof GetNoteByIdApiV1NotesNoteIdGetResponses];

export type UpdateNoteApiV1NotesNoteIdPatchData = {
    body: NoteUpdate;
    path: {
        note_id: string;
    };
    query?: never;
    url: '/api/v1/notes/{note_id}';
};

export type UpdateNoteApiV1NotesNoteIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateNoteApiV1NotesNoteIdPatchError = UpdateNoteApiV1NotesNoteIdPatchErrors[keyof UpdateNoteApiV1NotesNoteIdPatchErrors];

export type UpdateNoteApiV1NotesNoteIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Note;
};

export type UpdateNoteApiV1NotesNoteIdPatchResponse = UpdateNoteApiV1NotesNoteIdPatchResponses[keyof UpdateNoteApiV1NotesNoteIdPatchResponses];

export type UpsertNoteEndpointApiV1NotesUpsertPostData = {
    body: NoteUpsertPayload;
    path?: never;
    query?: never;
    url: '/api/v1/notes/upsert';
};

export type UpsertNoteEndpointApiV1NotesUpsertPostErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: unknown;
};

export type UpsertNoteEndpointApiV1NotesUpsertPostResponses = {
    /**
     * Successful Response
     */
    200: Note;
};

export type UpsertNoteEndpointApiV1NotesUpsertPostResponse = UpsertNoteEndpointApiV1NotesUpsertPostResponses[keyof UpsertNoteEndpointApiV1NotesUpsertPostResponses];

export type CreateInteractionApiV1InteractionsPostData = {
    body: InteractionCreate;
    path?: never;
    query?: never;
    url: '/api/v1/interactions/';
};

export type CreateInteractionApiV1InteractionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateInteractionApiV1InteractionsPostError = CreateInteractionApiV1InteractionsPostErrors[keyof CreateInteractionApiV1InteractionsPostErrors];

export type CreateInteractionApiV1InteractionsPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type CreateInteractionApiV1InteractionsPostResponse = CreateInteractionApiV1InteractionsPostResponses[keyof CreateInteractionApiV1InteractionsPostResponses];

export type DeleteInteractionApiV1InteractionsInteractionIdDeleteData = {
    body?: never;
    path: {
        interaction_id: string;
    };
    query?: never;
    url: '/api/v1/interactions/{interaction_id}';
};

export type DeleteInteractionApiV1InteractionsInteractionIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteInteractionApiV1InteractionsInteractionIdDeleteError = DeleteInteractionApiV1InteractionsInteractionIdDeleteErrors[keyof DeleteInteractionApiV1InteractionsInteractionIdDeleteErrors];

export type DeleteInteractionApiV1InteractionsInteractionIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteInteractionApiV1InteractionsInteractionIdDeleteResponse = DeleteInteractionApiV1InteractionsInteractionIdDeleteResponses[keyof DeleteInteractionApiV1InteractionsInteractionIdDeleteResponses];

export type GetInteractionApiV1InteractionsInteractionIdGetData = {
    body?: never;
    path: {
        interaction_id: string;
    };
    query?: never;
    url: '/api/v1/interactions/{interaction_id}';
};

export type GetInteractionApiV1InteractionsInteractionIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetInteractionApiV1InteractionsInteractionIdGetError = GetInteractionApiV1InteractionsInteractionIdGetErrors[keyof GetInteractionApiV1InteractionsInteractionIdGetErrors];

export type GetInteractionApiV1InteractionsInteractionIdGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetInteractionApiV1InteractionsInteractionIdGetResponse = GetInteractionApiV1InteractionsInteractionIdGetResponses[keyof GetInteractionApiV1InteractionsInteractionIdGetResponses];

export type UpdateInteractionApiV1InteractionsInteractionIdPatchData = {
    body: InteractionUpdate;
    path: {
        interaction_id: string;
    };
    query?: never;
    url: '/api/v1/interactions/{interaction_id}';
};

export type UpdateInteractionApiV1InteractionsInteractionIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateInteractionApiV1InteractionsInteractionIdPatchError = UpdateInteractionApiV1InteractionsInteractionIdPatchErrors[keyof UpdateInteractionApiV1InteractionsInteractionIdPatchErrors];

export type UpdateInteractionApiV1InteractionsInteractionIdPatchResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpdateInteractionApiV1InteractionsInteractionIdPatchResponse = UpdateInteractionApiV1InteractionsInteractionIdPatchResponses[keyof UpdateInteractionApiV1InteractionsInteractionIdPatchResponses];

export type GetInteractionsByUserApiV1InteractionsUserUserIdGetData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/v1/interactions/user/{user_id}';
};

export type GetInteractionsByUserApiV1InteractionsUserUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetInteractionsByUserApiV1InteractionsUserUserIdGetError = GetInteractionsByUserApiV1InteractionsUserUserIdGetErrors[keyof GetInteractionsByUserApiV1InteractionsUserUserIdGetErrors];

export type GetInteractionsByUserApiV1InteractionsUserUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type GetInteractionsByUserApiV1InteractionsUserUserIdGetResponse = GetInteractionsByUserApiV1InteractionsUserUserIdGetResponses[keyof GetInteractionsByUserApiV1InteractionsUserUserIdGetResponses];

export type GetInteractionByWineApiV1InteractionsWineWineIdGetData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/interactions/wine/{wine_id}';
};

export type GetInteractionByWineApiV1InteractionsWineWineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetInteractionByWineApiV1InteractionsWineWineIdGetError = GetInteractionByWineApiV1InteractionsWineWineIdGetErrors[keyof GetInteractionByWineApiV1InteractionsWineWineIdGetErrors];

export type GetInteractionByWineApiV1InteractionsWineWineIdGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetInteractionByWineApiV1InteractionsWineWineIdGetResponse = GetInteractionByWineApiV1InteractionsWineWineIdGetResponses[keyof GetInteractionByWineApiV1InteractionsWineWineIdGetResponses];

export type ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostData = {
    body?: never;
    path: {
        wine_id: string;
        action: string;
    };
    query?: never;
    url: '/api/v1/interactions/wine/{wine_id}/toggle/{action}';
};

export type ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostError = ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostErrors[keyof ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostErrors];

export type ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostResponse = ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostResponses[keyof ToggleInteractionApiV1InteractionsWineWineIdToggleActionPostResponses];

export type RateWineApiV1InteractionsWineWineIdRatePostData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query: {
        rating: number;
    };
    url: '/api/v1/interactions/wine/{wine_id}/rate';
};

export type RateWineApiV1InteractionsWineWineIdRatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RateWineApiV1InteractionsWineWineIdRatePostError = RateWineApiV1InteractionsWineWineIdRatePostErrors[keyof RateWineApiV1InteractionsWineWineIdRatePostErrors];

export type RateWineApiV1InteractionsWineWineIdRatePostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RateWineApiV1InteractionsWineWineIdRatePostResponse = RateWineApiV1InteractionsWineWineIdRatePostResponses[keyof RateWineApiV1InteractionsWineWineIdRatePostResponses];

export type WineChatApiV1ChatWinePostData = {
    body: ChatRequest;
    path?: never;
    query?: never;
    url: '/api/v1/chat/wine';
};

export type WineChatApiV1ChatWinePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WineChatApiV1ChatWinePostError = WineChatApiV1ChatWinePostErrors[keyof WineChatApiV1ChatWinePostErrors];

export type WineChatApiV1ChatWinePostResponses = {
    /**
     * Successful Response
     */
    200: ChatResponse;
};

export type WineChatApiV1ChatWinePostResponse = WineChatApiV1ChatWinePostResponses[keyof WineChatApiV1ChatWinePostResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TestSupabaseApiV1TestSupabaseGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/test-supabase';
};

export type TestSupabaseApiV1TestSupabaseGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://src` | (string & {});
};