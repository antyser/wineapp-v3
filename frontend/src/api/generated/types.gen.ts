// This file is auto-generated by @hey-api/openapi-ts

/**
 * Full cellar model with all fields
 */
export type Cellar = {
    name: string;
    sections?: Array<string> | null;
    image_url?: string | null;
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Fields required to create a cellar
 */
export type CellarCreate = {
    name: string;
    sections?: Array<string> | null;
    image_url?: string | null;
    user_id: string;
};

/**
 * Result from listing cellars
 */
export type CellarListResult = {
    items: Array<Cellar>;
    total: number;
};

/**
 * Statistics for a cellar
 */
export type CellarStatistics = {
    total_bottles: number;
    total_value: number;
    bottles_by_type: {
        [key: string]: number;
    };
    bottles_by_region: {
        [key: string]: number;
    };
    bottles_by_vintage: {
        [key: string]: number;
    };
};

/**
 * Fields that can be updated
 */
export type CellarUpdate = {
    name?: string | null;
    sections?: Array<string> | null;
    image_url?: string | null;
};

/**
 * Fields required to create a cellar wine
 */
export type CellarWineCreate = {
    cellar_id: string;
    wine_id: string;
    purchase_date?: string | null;
    purchase_price?: number | null;
    quantity?: number;
    size?: string | null;
    section?: string | null;
    condition?: string | null;
    status?: string;
};

/**
 * Result from listing cellar wines
 */
export type CellarWineListResult = {
    items: Array<CellarWineResponse>;
    total: number;
};

/**
 * Cellar wine with embedded wine details
 */
export type CellarWineResponse = {
    cellar_id: string;
    wine_id: string;
    purchase_date?: string | null;
    purchase_price?: number | null;
    quantity?: number;
    size?: string | null;
    section?: string | null;
    condition?: string | null;
    status?: string;
    id: string;
    created_at: string;
    updated_at: string;
    wine: {
        [key: string]: unknown;
    };
};

/**
 * Fields that can be updated for a cellar wine
 */
export type CellarWineUpdate = {
    purchase_date?: string | null;
    purchase_price?: number | null;
    quantity?: number | null;
    size?: string | null;
    section?: string | null;
    condition?: string | null;
    status?: string | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Enhanced search history item with wine details
 */
export type SearchHistoryItemResponse = {
    search_type: SearchType;
    search_query?: string | null;
    result_wine_ids?: Array<string> | null;
    id: string;
    user_id: string;
    created_at: string;
    wines?: Array<Wine> | null;
};

/**
 * Response model for search history endpoint
 */
export type SearchHistoryResponse = {
    items: Array<SearchHistoryItemResponse>;
    total: number;
    limit: number;
    offset: number;
};

export type SearchRequest = {
    text_input?: string | null;
    image_url?: string | null;
};

/**
 * Enum for search types
 */
export type SearchType = 'text' | 'image';

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

/**
 * Full wine model with all fields
 */
export type Wine = {
    name: string;
    winery?: string | null;
    vintage?: number | null;
    region?: string | null;
    country?: string | null;
    varietal?: string | null;
    type?: string | null;
    price?: number | null;
    rating?: number | null;
    wine_searcher_url?: string | null;
    average_price?: number | null;
    description?: string | null;
    name_alias?: Array<string> | null;
    image_url?: string | null;
    wine_searcher_id?: string | null;
    drinking_window?: string | null;
    food_pairings?: string | null;
    abv?: string | null;
    tasting_notes?: string | null;
    winemaker_notes?: string | null;
    professional_reviews?: string | null;
    id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Fields required to create a wine
 */
export type WineCreate = {
    name: string;
    winery?: string | null;
    vintage?: number | null;
    region?: string | null;
    country?: string | null;
    varietal?: string | null;
    type?: string | null;
    price?: number | null;
    rating?: number | null;
    wine_searcher_url?: string | null;
    average_price?: number | null;
    description?: string | null;
    name_alias?: Array<string> | null;
    image_url?: string | null;
    wine_searcher_id?: string | null;
    drinking_window?: string | null;
    food_pairings?: string | null;
    abv?: string | null;
    tasting_notes?: string | null;
    winemaker_notes?: string | null;
    professional_reviews?: string | null;
};

/**
 * Fields that can be updated
 */
export type WineUpdate = {
    name?: string | null;
    winery?: string | null;
    vintage?: number | null;
    region?: string | null;
    country?: string | null;
    varietal?: string | null;
    type?: string | null;
    price?: number | null;
    rating?: number | null;
    tasting_notes?: string | null;
    image_url?: string | null;
    wine_searcher_id?: string | null;
    wine_searcher_url?: string | null;
    average_price?: number | null;
    description?: string | null;
    drinking_window?: string | null;
    food_pairings?: string | null;
    abv?: string | null;
    name_alias?: Array<string> | null;
    winemaker_notes?: string | null;
    professional_reviews?: string | null;
};

export type GetAllWinesApiV1WinesGetData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        region?: string | null;
        country?: string | null;
        varietal?: string | null;
        type?: string | null;
        min_price?: number | null;
        max_price?: number | null;
        min_rating?: number | null;
        min_vintage?: number | null;
        max_vintage?: number | null;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/wines/';
};

export type GetAllWinesApiV1WinesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllWinesApiV1WinesGetError = GetAllWinesApiV1WinesGetErrors[keyof GetAllWinesApiV1WinesGetErrors];

export type GetAllWinesApiV1WinesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Wine>;
};

export type GetAllWinesApiV1WinesGetResponse = GetAllWinesApiV1WinesGetResponses[keyof GetAllWinesApiV1WinesGetResponses];

export type CreateNewWineApiV1WinesPostData = {
    body: WineCreate;
    path?: never;
    query?: never;
    url: '/api/v1/wines/';
};

export type CreateNewWineApiV1WinesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateNewWineApiV1WinesPostError = CreateNewWineApiV1WinesPostErrors[keyof CreateNewWineApiV1WinesPostErrors];

export type CreateNewWineApiV1WinesPostResponses = {
    /**
     * Successful Response
     */
    201: Wine;
};

export type CreateNewWineApiV1WinesPostResponse = CreateNewWineApiV1WinesPostResponses[keyof CreateNewWineApiV1WinesPostResponses];

export type DeleteExistingWineApiV1WinesWineIdDeleteData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/wines/{wine_id}';
};

export type DeleteExistingWineApiV1WinesWineIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteExistingWineApiV1WinesWineIdDeleteError = DeleteExistingWineApiV1WinesWineIdDeleteErrors[keyof DeleteExistingWineApiV1WinesWineIdDeleteErrors];

export type DeleteExistingWineApiV1WinesWineIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteExistingWineApiV1WinesWineIdDeleteResponse = DeleteExistingWineApiV1WinesWineIdDeleteResponses[keyof DeleteExistingWineApiV1WinesWineIdDeleteResponses];

export type GetOneWineApiV1WinesWineIdGetData = {
    body?: never;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/wines/{wine_id}';
};

export type GetOneWineApiV1WinesWineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOneWineApiV1WinesWineIdGetError = GetOneWineApiV1WinesWineIdGetErrors[keyof GetOneWineApiV1WinesWineIdGetErrors];

export type GetOneWineApiV1WinesWineIdGetResponses = {
    /**
     * Successful Response
     */
    200: Wine;
};

export type GetOneWineApiV1WinesWineIdGetResponse = GetOneWineApiV1WinesWineIdGetResponses[keyof GetOneWineApiV1WinesWineIdGetResponses];

export type UpdateExistingWineApiV1WinesWineIdPatchData = {
    body: WineUpdate;
    path: {
        wine_id: string;
    };
    query?: never;
    url: '/api/v1/wines/{wine_id}';
};

export type UpdateExistingWineApiV1WinesWineIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateExistingWineApiV1WinesWineIdPatchError = UpdateExistingWineApiV1WinesWineIdPatchErrors[keyof UpdateExistingWineApiV1WinesWineIdPatchErrors];

export type UpdateExistingWineApiV1WinesWineIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Wine;
};

export type UpdateExistingWineApiV1WinesWineIdPatchResponse = UpdateExistingWineApiV1WinesWineIdPatchResponses[keyof UpdateExistingWineApiV1WinesWineIdPatchResponses];

export type ListCellarsApiV1CellarsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by user ID
         */
        user_id?: string | null;
        /**
         * Maximum number of results to return
         */
        limit?: number;
        /**
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/cellars';
};

export type ListCellarsApiV1CellarsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListCellarsApiV1CellarsGetError = ListCellarsApiV1CellarsGetErrors[keyof ListCellarsApiV1CellarsGetErrors];

export type ListCellarsApiV1CellarsGetResponses = {
    /**
     * Successful Response
     */
    200: CellarListResult;
};

export type ListCellarsApiV1CellarsGetResponse = ListCellarsApiV1CellarsGetResponses[keyof ListCellarsApiV1CellarsGetResponses];

export type CreateCellarApiV1CellarsPostData = {
    body: CellarCreate;
    path?: never;
    query?: never;
    url: '/api/v1/cellars';
};

export type CreateCellarApiV1CellarsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCellarApiV1CellarsPostError = CreateCellarApiV1CellarsPostErrors[keyof CreateCellarApiV1CellarsPostErrors];

export type CreateCellarApiV1CellarsPostResponses = {
    /**
     * Successful Response
     */
    201: Cellar;
};

export type CreateCellarApiV1CellarsPostResponse = CreateCellarApiV1CellarsPostResponses[keyof CreateCellarApiV1CellarsPostResponses];

export type DeleteCellarApiV1CellarsCellarIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar to delete
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}';
};

export type DeleteCellarApiV1CellarsCellarIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCellarApiV1CellarsCellarIdDeleteError = DeleteCellarApiV1CellarsCellarIdDeleteErrors[keyof DeleteCellarApiV1CellarsCellarIdDeleteErrors];

export type DeleteCellarApiV1CellarsCellarIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteCellarApiV1CellarsCellarIdDeleteResponse = DeleteCellarApiV1CellarsCellarIdDeleteResponses[keyof DeleteCellarApiV1CellarsCellarIdDeleteResponses];

export type GetCellarApiV1CellarsCellarIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar to retrieve
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}';
};

export type GetCellarApiV1CellarsCellarIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCellarApiV1CellarsCellarIdGetError = GetCellarApiV1CellarsCellarIdGetErrors[keyof GetCellarApiV1CellarsCellarIdGetErrors];

export type GetCellarApiV1CellarsCellarIdGetResponses = {
    /**
     * Successful Response
     */
    200: Cellar;
};

export type GetCellarApiV1CellarsCellarIdGetResponse = GetCellarApiV1CellarsCellarIdGetResponses[keyof GetCellarApiV1CellarsCellarIdGetResponses];

export type UpdateCellarApiV1CellarsCellarIdPatchData = {
    body: CellarUpdate;
    path: {
        /**
         * The ID of the cellar to update
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}';
};

export type UpdateCellarApiV1CellarsCellarIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCellarApiV1CellarsCellarIdPatchError = UpdateCellarApiV1CellarsCellarIdPatchErrors[keyof UpdateCellarApiV1CellarsCellarIdPatchErrors];

export type UpdateCellarApiV1CellarsCellarIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Cellar;
};

export type UpdateCellarApiV1CellarsCellarIdPatchResponse = UpdateCellarApiV1CellarsCellarIdPatchResponses[keyof UpdateCellarApiV1CellarsCellarIdPatchResponses];

export type ListCellarWinesApiV1CellarsCellarIdWinesGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar
         */
        cellar_id: string;
    };
    query?: {
        /**
         * Filter by cellar section
         */
        section?: string | null;
        /**
         * Filter by status (e.g. in_stock, consumed)
         */
        status?: string | null;
        /**
         * Search query for wine name, winery, etc.
         */
        query?: string | null;
        /**
         * Field to sort by
         */
        sort_by?: string | null;
        /**
         * Sort direction (true for descending)
         */
        sort_desc?: boolean;
        /**
         * Maximum number of results to return
         */
        limit?: number;
        /**
         * Number of results to skip
         */
        offset?: number;
    };
    url: '/api/v1/cellars/{cellar_id}/wines';
};

export type ListCellarWinesApiV1CellarsCellarIdWinesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListCellarWinesApiV1CellarsCellarIdWinesGetError = ListCellarWinesApiV1CellarsCellarIdWinesGetErrors[keyof ListCellarWinesApiV1CellarsCellarIdWinesGetErrors];

export type ListCellarWinesApiV1CellarsCellarIdWinesGetResponses = {
    /**
     * Successful Response
     */
    200: CellarWineListResult;
};

export type ListCellarWinesApiV1CellarsCellarIdWinesGetResponse = ListCellarWinesApiV1CellarsCellarIdWinesGetResponses[keyof ListCellarWinesApiV1CellarsCellarIdWinesGetResponses];

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar
         */
        cellar_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/{cellar_id}/statistics';
};

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetError = GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetErrors[keyof GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetErrors];

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponses = {
    /**
     * Successful Response
     */
    200: CellarStatistics;
};

export type GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponse = GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponses[keyof GetCellarStatisticsApiV1CellarsCellarIdStatisticsGetResponses];

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar wine to remove
         */
        cellar_wine_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/wines/{cellar_wine_id}';
};

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteError = RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteErrors[keyof RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteErrors];

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponse = RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponses[keyof RemoveWineFromCellarApiV1CellarsWinesCellarWineIdDeleteResponses];

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the cellar wine to retrieve
         */
        cellar_wine_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/wines/{cellar_wine_id}';
};

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetError = GetCellarWineApiV1CellarsWinesCellarWineIdGetErrors[keyof GetCellarWineApiV1CellarsWinesCellarWineIdGetErrors];

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetResponses = {
    /**
     * Successful Response
     */
    200: CellarWineResponse;
};

export type GetCellarWineApiV1CellarsWinesCellarWineIdGetResponse = GetCellarWineApiV1CellarsWinesCellarWineIdGetResponses[keyof GetCellarWineApiV1CellarsWinesCellarWineIdGetResponses];

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchData = {
    body: CellarWineUpdate;
    path: {
        /**
         * The ID of the cellar wine to update
         */
        cellar_wine_id: string;
    };
    query?: never;
    url: '/api/v1/cellars/wines/{cellar_wine_id}';
};

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchError = UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchErrors[keyof UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchErrors];

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponses = {
    /**
     * Successful Response
     */
    200: CellarWineResponse;
};

export type UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponse = UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponses[keyof UpdateCellarWineApiV1CellarsWinesCellarWineIdPatchResponses];

export type AddWineToCellarApiV1CellarsWinesPostData = {
    body: CellarWineCreate;
    path?: never;
    query?: never;
    url: '/api/v1/cellars/wines';
};

export type AddWineToCellarApiV1CellarsWinesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddWineToCellarApiV1CellarsWinesPostError = AddWineToCellarApiV1CellarsWinesPostErrors[keyof AddWineToCellarApiV1CellarsWinesPostErrors];

export type AddWineToCellarApiV1CellarsWinesPostResponses = {
    /**
     * Successful Response
     */
    201: CellarWineResponse;
};

export type AddWineToCellarApiV1CellarsWinesPostResponse = AddWineToCellarApiV1CellarsWinesPostResponses[keyof AddWineToCellarApiV1CellarsWinesPostResponses];

export type SearchWinesEndpointApiV1SearchPostData = {
    body?: SearchRequest | null;
    path?: never;
    query?: never;
    url: '/api/v1/search';
};

export type SearchWinesEndpointApiV1SearchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchWinesEndpointApiV1SearchPostError = SearchWinesEndpointApiV1SearchPostErrors[keyof SearchWinesEndpointApiV1SearchPostErrors];

export type SearchWinesEndpointApiV1SearchPostResponses = {
    /**
     * Successful Response
     */
    200: Array<Wine>;
};

export type SearchWinesEndpointApiV1SearchPostResponse = SearchWinesEndpointApiV1SearchPostResponses[keyof SearchWinesEndpointApiV1SearchPostResponses];

export type GetUserSearchHistoryApiV1SearchHistoryGetData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/search/history';
};

export type GetUserSearchHistoryApiV1SearchHistoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserSearchHistoryApiV1SearchHistoryGetError = GetUserSearchHistoryApiV1SearchHistoryGetErrors[keyof GetUserSearchHistoryApiV1SearchHistoryGetErrors];

export type GetUserSearchHistoryApiV1SearchHistoryGetResponses = {
    /**
     * Successful Response
     */
    200: SearchHistoryResponse;
};

export type GetUserSearchHistoryApiV1SearchHistoryGetResponse = GetUserSearchHistoryApiV1SearchHistoryGetResponses[keyof GetUserSearchHistoryApiV1SearchHistoryGetResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TestSupabaseApiV1TestSupabaseGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/test-supabase';
};

export type TestSupabaseApiV1TestSupabaseGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://src` | (string & {});
};